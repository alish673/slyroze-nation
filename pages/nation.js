import { useEffect, useState } from 'react'; import { signOut, onAuthStateChanged, deleteUser } from "firebase/auth"; import { collection, getDocs, doc, deleteDoc } from "firebase/firestore"; import { auth, db } from '../utils/firebase'; import Header from '../components/Header'; import NationMapOverlay from '../components/NationMapOverlay'; import AuthModal from '../components/AuthModal'; import AboutPanel from '../components/AboutPanel'; import DisclaimerPanel from '../components/DisclaimerPanel'; import NicknameModal from '../components/NicknameModal'; import StatsCard from '../components/StatsCard'; import Leaderboard from '../components/Leaderboard'; import ZoneGrid from '../components/ZoneGrid'; import { connectWallet } from '../utils/wallet'; import { getSlypBalance } from '../utils/slyp'; import { mintPassport } from '../utils/passport'; import { claimZoneWithSlyPass } from '../utils/zone'; import { getLeaderboard } from '../utils/leaderboard'; import { setUserAlias } from '../utils/nickname'; import { FaTelegram, FaTwitter, FaInstagram } from 'react-icons/fa';

export default function Nation() { const [walletAddress, setWalletAddress] = useState(""); const [slypBalance, setSlypBalance] = useState(""); const [provider, setProvider] = useState(null); const [signer, setSigner] = useState(null); const [leaderboard, setLeaderboard] = useState([]); const [loadingMessage, setLoadingMessage] = useState(""); const [user, setUser] = useState(null); const [showAuthModal, setShowAuthModal] = useState(false); const [showAboutPanel, setShowAboutPanel] = useState(false); const [showDisclaimer, setShowDisclaimer] = useState(false); const [showNicknameModal, setShowNicknameModal] = useState(false); const [showHowNationWorks, setShowHowNationWorks] = useState(false); const [stats, setStats] = useState({ users: 0, zones: 0, passports: 0 }); const [passportId, setPassportId] = useState(null); const [passportImage, setPassportImage] = useState(null);

useEffect(() => { const unsubscribe = onAuthStateChanged(auth, (usr) => { setUser(usr); if (usr) fetchPassport(usr.uid); else { setPassportId(null); setPassportImage(null); } }); return () => unsubscribe(); }, []);

useEffect(() => { async function loadLeaders() { const data = await getLeaderboard(); setLeaderboard(data); } async function loadStats() { const usersSnap = await getDocs(collection(db, "users")); const zonesSnap = await getDocs(collection(db, "claimed_zones")); const passportsSnap = await getDocs(collection(db, "passports")); setStats({ users: usersSnap.size, zones: zonesSnap.size, passports: passportsSnap.size }); } loadLeaders(); loadStats(); }, []);

const handleConnectWallet = async () => { try { if (!window.ethereum) throw new Error("MetaMask not found"); const result = await connectWallet(); if (result) { setWalletAddress(result.address); setProvider(result.provider); setSigner(result.signer); const balance = await getSlypBalance(result.provider, result.address); setSlypBalance(balance); } } catch (err) { console.error(err); alert("Wallet connect failed. " + err.message); } };

async function fetchPassport(uid) { try { const passSnap = await getDocs(collection(db, "passports")); let found = null; passSnap.forEach((doc) => { if (doc.data().ownerUid === uid) found = doc; });

if (found) { const id = found.data().tokenId || found.id; setPassportId(id); const res = await fetch(`https://slyroze.com/metadata/passport/${id}.json`); const raw = await res.text(); try { const data = JSON.parse(raw); if (data && data.image) { setPassportImage(data.image); } else { console.warn("Metadata JSON missing image:", data); setPassportImage(null); } } catch (err) { console.error("Invalid JSON metadata:", raw); setPassportImage(null); } } else { setPassportId(null); setPassportImage(null); } } catch (err) { console.error("fetchPassport error:", err); setPassportId(null); setPassportImage(null); } 

}

const handleLogout = async () => { await signOut(auth); alert("Logged out successfully."); };

const handleMintPassport = async () => { if (!signer || !walletAddress) return alert("Connect Wallet first."); if (passportId) return alert("You already have a Passport."); try { setLoadingMessage("Minting Passport..."); const tokenId = await mintPassport(signer, walletAddress, user?.uid); const balance = await getSlypBalance(provider, walletAddress); setSlypBalance(balance); if (user) await fetchPassport(user.uid); } catch (err) { alert("Minting failed: " + err.message); } finally { setLoadingMessage(""); } };

const handleClaimZone = async () => { if (!signer || !walletAddress) return alert("Connect Wallet first."); try { const zoneId = prompt("Enter Zone ID to claim (e.g., zone-000001):"); if (!zoneId) return; const slypPrice = 50; setLoadingMessage(Claiming ${zoneId}...); const result = await claimZoneWithSlyPass(signer, zoneId, slypPrice); alert(result); const updatedLeaderboard = await getLeaderboard(); setLeaderboard(updatedLeaderboard); } catch (err) { alert("Claim failed: " + err.message); } finally { setLoadingMessage(""); } };

